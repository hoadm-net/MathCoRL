# Function Prototypes for Table Data Processing
# Original functions + 10 new table-specific functions

# ==================== ORIGINAL BASIC MATH FUNCTIONS ====================

def add(a: float, b: float) -> float:
    """Add two numbers together.
    
    Args:
        a: First number
        b: Second number
    
    Returns:
        Sum of a and b
    
    Example:
        add(5, 3) -> 8
    """
    pass

def sub(a: float, b: float) -> float:
    """Subtract second number from first number.
    
    Args:
        a: Number to subtract from
        b: Number to subtract
    
    Returns:
        Difference a - b
    
    Example:
        sub(10, 4) -> 6
    """
    pass

def mul(a: float, b: float) -> float:
    """Multiply two numbers.
    
    Args:
        a: First number
        b: Second number
    
    Returns:
        Product of a and b
    
    Example:
        mul(6, 7) -> 42
    """
    pass

def div(a: float, b: float) -> float:
    """Divide first number by second number.
    
    Args:
        a: Dividend
        b: Divisor
    
    Returns:
        Quotient a / b
    
    Example:
        div(15, 3) -> 5
    """
    pass

def sum(numbers: list) -> float:
    """Calculate the sum of a list of numbers.
    
    Args:
        numbers: List of numbers
    
    Returns:
        Sum of all numbers
    
    Example:
        sum([1, 2, 3, 4, 5]) -> 15
    """
    pass

def mean(numbers: list) -> float:
    """Calculate the arithmetic mean of a list of numbers.
    
    Args:
        numbers: List of numbers
    
    Returns:
        Arithmetic mean
    
    Example:
        mean([2, 4, 6, 8]) -> 5.0
    """
    pass

def max(*args: float) -> float:
    """Find the maximum value among given numbers.
    
    Args:
        *args: Variable number of arguments
    
    Returns:
        Maximum value
    
    Example:
        max(5, 2, 8, 1) -> 8
    """
    pass

def min(*args: float) -> float:
    """Find the minimum value among given numbers.
    
    Args:
        *args: Variable number of arguments
    
    Returns:
        Minimum value
    
    Example:
        min(5, 2, 8, 1) -> 1
    """
    pass

def count(numbers: list) -> int:
    """Count the number of elements in a list.
    
    Args:
        numbers: List of numbers
    
    Returns:
        Number of elements
    
    Example:
        count([1, 2, 3, 4, 5]) -> 5
    """
    pass

def percentage(part: float, whole: float) -> float:
    """Calculate what percentage part is of whole.
    
    Args:
        part: Part value
        whole: Whole value
    
    Returns:
        Percentage value
    
    Example:
        percentage(25, 100) -> 25.0
    """
    pass

# ==================== NEW TABLE-SPECIFIC FUNCTIONS ====================

def get_cell(table: list, row: int, col: int) -> float:
    """Get value from specific cell in table.
    
    Args:
        table: 2D list representing the table
        row: Row index (0-based)
        col: Column index (0-based)
    
    Returns:
        Value at specified cell
    
    Example:
        get_cell([[1, 2], [3, 4]], 1, 0) -> 3
    """
    pass

def get_column(table: list, col: int) -> list:
    """Get entire column from table.
    
    Args:
        table: 2D list representing the table
        col: Column index (0-based)
    
    Returns:
        List of values in the specified column
    
    Example:
        get_column([[1, 2], [3, 4], [5, 6]], 1) -> [2, 4, 6]
    """
    pass

def sum_column(table: list, col: int) -> float:
    """Calculate sum of all values in a column.
    
    Args:
        table: 2D list representing the table
        col: Column index (0-based)
    
    Returns:
        Sum of values in the column
    
    Example:
        sum_column([[1, 2], [3, 4], [5, 6]], 1) -> 12
    """
    pass

def average_column(table: list, col: int) -> float:
    """Calculate average of all values in a column.
    
    Args:
        table: 2D list representing the table
        col: Column index (0-based)
    
    Returns:
        Average of values in the column
    
    Example:
        average_column([[1, 2], [3, 4], [5, 6]], 0) -> 3.0
    """
    pass

def max_in_column(table: list, col: int) -> float:
    """Find maximum value in a column.
    
    Args:
        table: 2D list representing the table
        col: Column index (0-based)
    
    Returns:
        Maximum value in the column
    
    Example:
        max_in_column([[1, 2], [5, 4], [3, 6]], 1) -> 6
    """
    pass

def min_in_column(table: list, col: int) -> float:
    """Find minimum value in a column.
    
    Args:
        table: 2D list representing the table
        col: Column index (0-based)
    
    Returns:
        Minimum value in the column
    
    Example:
        min_in_column([[1, 2], [5, 4], [3, 6]], 0) -> 1
    """
    pass

def find_max_row(table: list, col: int) -> int:
    """Find row index with maximum value in specified column.
    
    Args:
        table: 2D list representing the table
        col: Column index to search (0-based)
    
    Returns:
        Row index with maximum value
    
    Example:
        find_max_row([[1, 2], [5, 4], [3, 6]], 1) -> 2
    """
    pass

def count_greater_than(table: list, col: int, threshold: float) -> int:
    """Count values in column greater than threshold.
    
    Args:
        table: 2D list representing the table
        col: Column index (0-based)
        threshold: Threshold value
    
    Returns:
        Number of values greater than threshold
    
    Example:
        count_greater_than([[1, 2], [5, 4], [3, 6]], 1, 3) -> 2
    """
    pass

def get_top_n_values(table: list, col: int, n: int) -> list:
    """Get top N highest values from specified column.
    
    Args:
        table: 2D list representing the table
        col: Column index (0-based)
        n: Number of top values to return
    
    Returns:
        List of top N values
    
    Example:
        get_top_n_values([[1, 10], [5, 20], [3, 15]], 1, 2) -> [20, 15]
    """
    pass

def calculate_column_difference(table: list, col1: int, col2: int) -> list:
    """Calculate difference between two columns (col1 - col2).
    
    Args:
        table: 2D list representing the table
        col1: First column index (0-based)
        col2: Second column index (0-based)
    
    Returns:
        List of differences for each row
    
    Example:
        calculate_column_difference([[10, 3], [20, 5]], 0, 1) -> [7, 15]
    """
    pass 